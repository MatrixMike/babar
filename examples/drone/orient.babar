speak-config true.
import "clj-drone.core".
import "clj-drone.navdata".


assert init-drone [] do (drone-initialize)
                        (set-log-data [:seq-num :battery :targets-num :targets])
                        (drone :init-targeting)
                        (drone :target-roundel-v)
                        (drone :hover-on-roundel).
assert init-nav [] (drone-init-navdata).
(init-drone).



assert navdata (get-nav-data :default).
assert drone-navdata [key] get @navdata key.
assert navdata-equal [key val] = (drone-navdata key) val.
assert navdata-gt [key val] > (drone-navdata key) val.
assert see-target [] (navdata-equal :targets-num 1).
assert target-data [] first (get-navdata :targets).
assert first-target [] first (target-data).
assert orient [] get (first-target) :target-orient-angle.
assert get-orient [] if (see-target) (orient).
assert in-range [] if (get-orient) (< (get-orient) 45).
assert out-of-range [] if (get-orient) (> (get-orient) 45).

convince #oriented "I am good" fn [] (in-range).
convince #not-oriented "I am not oriented" fn [] (out-of-range).
request *be-oriented when #not-oriented ongoing fn [] (drone :led_blink_orange).
request *celebrate when #oriented ongoing fn [] (drone :led_blink_green).

convince #landed "I am on the ground" fn [] (navdata-equal :control-state :landed).
convince #flying "I am flying" fn [] or (navdata-equal :control-state :flying)
                                        (navdata-equal :control-state :hovering).
convince #high-enough "I am high enough" fn [] (navdata-gt :altitude 1.5).

request *take-off when #landed fn [] (drone :take-off).
request *cruising-alt when #flying until #high-enough fn [] (drone :up 0.5).
request *cruise when #high-enough fn [] (drone :hover).

(init-nav).